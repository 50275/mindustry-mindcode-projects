def domes(flag, type, first)
    if first == null then
        while @unit == null || (@unit.@flag != 0 && @unit.@flag != flag) do
            ubind(type);  // Bind to the first available unit of the specified type
        end;
        first = @unit;  // Save reference to the first bound unit
    end;
    while @unit != first do
        ubind(type); 
    end; 

    c = 0;
    while c < @links do
        // Get the current dome
        dome = getlink(c);
        if dome.@type != @overdrive-dome then
            c += 1;  // Skip to the next linked building if this one is invalid
            continue;
        end;
        flag(flag); 
        // If the unit has items, attempt to deliver them
        if @unit.@totalItems > 0 then
            approach(dome.@x, dome.@y, 2);  // Move to the dome
            itemDrop(dome, 9999);  // Drop items into the dome
            if @unit.@silicon == 0 && @unit.@phase-fabric == 0 then
                itemDrop(@air, 9999); 
            elsif @unit.@silicon > 0 && dome.@silicon == 10 then 
                itemDrop(@air, 9999); 
            elsif @unit.@phase-fabric > 0 && dome.@phase-fabric == 10 then
                itemDrop(@air, 9999); 
            end; 
            //itemDrop(@air, 9999);  // Drop unwanted items to clear inventory
        else
            target = ulocate(building, core, false, out corex, out corey, out useless);
            // Locate the core and retrieve items for the dome
            // distance = sqrt((dome.@x - corex) ** 2 + (dome.@y - corey) ** 2); 
            // Deliver items the dome needs
            if @unit.@totalItems > 0 then
                item = @unit.@firstItem; 
                if (item != @silicon && item != @phase-fabric) || (dome.sensor(item) == 10) then
                    itemDrop(@air, 9999); 
                else 
                    approach(dome.@x, dome.@y, 6); 
                    itemDrop(dome, 9999); 
                end; 
            else
                silicon = dome.@silicon;
                phase = dome.@phase-fabric; 
                if silicon < phase then
                    resource = @silicon; 
                else 
                    resource = @phase-fabric; 
                end; 
                target = ulocate(building, core, false, out corex, out corey, out useless);
                approach(corex, corey, 6); 
                itemTake(target, resource, 10-dome.sensor(resource)); 
            end; 
        end;
        
        // Increment to the next dome
        c += 1;
        // Rebind to the correct unit
        do 
            ubind(type);
        loop while (@unit == null || (@unit.@flag != 0 && @unit.@flag != flag)) && first != null;  // Ensure the same unit type is always controlled
        if first == @unit then
            break; 
        end; 
    end;
    while first != @unit do
        ubind(type); 
    end; 
    return first; 
end;
flag = @thisx + @thisy * 1000; 
type = @flare;
TEST = domes(flag, type, TEST); 
ubind(@flare); 
