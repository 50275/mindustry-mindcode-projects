param radius = 24.5; 
param x = @thisx; 
param y = @thisy; 
setrate(9999); 
/*
for i in x - radius...x + radius do
    for j in y - radius...y + radius do
        if 
        
        setblock(block, @junction, i, j, @derelict, 0);
    end;
end; 
*/
for i in 0...radius do
    // find the greatest integer Q such that the distance between 
        // (@thisx, @thisy) and (i, Q) is less than `radius` 
    //Q = sqrt(radius^2 - (x2 - x1)^2) + y1; 
    Q = sqrt(radius**2 - i**2); 
    Q = floor(Q); 
    // something about 
    setblock(block, @junction, i + x, Q + y, 1, 0);
    setblock(block, @junction, -i + x, Q + y, 1, 0);
    setblock(block, @junction, i + x, -Q + y, 1, 0);
    setblock(block, @junction, -i + x, -Q + y, 1, 0);
    setblock(block, @junction, Q + x, i + y, 1, 0);
    setblock(block, @junction, -Q + x, i + y, 1, 0);
    setblock(block, @junction, Q + x, -i + y, 1, 0);
    setblock(block, @junction, -Q + x, -i + y, 1, 0);
end; 

xdev = radius * cos(30) * 2; 
ydev = radius * sin(30) * 2; 
effect(warn, x, y); 
effect(warn, x, y - radius*2); 
effect(warn, x, y + radius*2); 

effect(cross, x + xdev, y); 
effect(cross, x + radius * 2, y); 

